# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD AWS EC2 Docker

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read


jobs:
  build:
    # 기본 설정 및 application.yml 생성
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_REGION: ${{ secrets.S3_REGION }}
      KAKAO_REST_API: ${{ secrets.KAKAO_REST_API_CODE }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      LOCAL_PATH: ${{ secrets.LOCAL_PATH }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Make application.properties
      run: |
        echo "spring.messages.basename=errors" > ./src/main/resources/application.properties
        echo "server.servlet.session.tracking-modes=cookie" >> ./src/main/resources/application.properties
        echo "server.error.whitelabel.enabled=false" >> ./src/main/resources/application.properties
        echo "server.servlet.session.timeout=7500" >> ./src/main/resources/application.properties
        echo "" >> ./src/main/resources/application.properties
        echo "spring.datasource.url=${DATABASE_URL}" >> ./src/main/resources/application.properties
        echo "spring.datasource.username=${DATABASE_USERNAME}" >> ./src/main/resources/application.properties
        echo "spring.datasource.password=${DATABASE_PASSWORD}" >> ./src/main/resources/application.properties
        echo "" >> ./src/main/resources/application.properties
        echo "spring.servlet.multipart.max-file-size=4MB" >> ./src/main/resources/application.properties
        echo "spring.servlet.multipart.max-request-size=20MB" >> ./src/main/resources/application.properties
        echo "" >> ./src/main/resources/application.properties
        echo "# aws 설정" >> ./src/main/resources/application.properties
        echo "cloud.aws.region.static=ap-northeast-2" >> ./src/main/resources/application.properties
        echo "cloud.aws.stack.auto=false" >> ./src/main/resources/application.properties
        echo "s3.AccessKey=${S3_ACCESS_KEY}" >> ./src/main/resources/application.properties
        echo "s3.SecretKey=${S3_SECRET_KEY}" >> ./src/main/resources/application.properties
        echo "s3.region=${S3_REGION}" >> ./src/main/resources/application.properties
        echo "" >> ./src/main/resources/application.properties
        echo "kakao.restApiCode=${KAKAO_REST_API_CODE}" >> ./src/main/resources/application.properties
        echo "kakao.redirectURI=${KAKAO_REDIRECT_URI}" >> ./src/main/resources/application.properties
        echo "" >> ./src/main/resources/application.properties
        echo "logging.file.path=logs" >> ./src/main/resources/application.properties
        echo "localPath=${LOCAL_PATH}" >> ./src/main/resources/application.properties


    - name: Build with Gradle
      # run: ./gradlew build
      run: ./gradlew build -x test
      
    # - name: Run test file
    #   run: ./gradlew test --tests "kun.pomondor.domain.member.MemberRepositoryImplTest"

  
    ## 도커 이미지 빌드 후 도커허브에 push하기
    - name: web docker build and push
      run: |
        sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        sudo docker build --platform linux/amd64 -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
        sudo docker push ${{ secrets.DOCKER_REPO }}
         
    ## 서버에 접속하여 도커 이미지를 pull 받고 실행하기
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.KEY }}
        port: 22
        script: |
          # 가장 최신의 컨테이너 중지 및 삭제, 이 컨테이너에 사용된 이미지 삭제
          CONTAINER_ID=$(docker ps -q --latest)
          if [[ -n "$CONTAINER_ID" ]]; then
            IMAGE_ID=$(docker inspect --format='{{.Image}}' "$CONTAINER_ID")
            sudo docker stop "$CONTAINER_ID"
            sudo docker rm "$CONTAINER_ID"
            sudo docker rmi "$IMAGE_ID"
          fi
          
          # 도커에서 이미지 pull 후 run
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}
